import React, { PureComponent } from "react";
import logo from "../../img/logo.png";
import Storage from "../../util/Storage";
import SetupController from "../../controller/SetupController";
import ErrorHandler from "../../util/ErrorHandler";
import "./Setup.css";

class Setup extends PureComponent {
    constructor(props) {
        super(props);

        this.state = {
            firstname: "",
            lastname: "",
            email: "",
            password: "",
        };

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.validateInput = this.validateInput.bind(this);
    }

    /**
     * Handles changes generated by form inputs
     * @param {Event} event
     */
    handleChange(event) {
        this.setState({ [event.target.name]: event.target.value });
    }

    /**
     * Handles form submission
     * @param {Event} event
     */
    handleSubmit(event) {
        event.preventDefault();
        const btn = document.querySelector(".btn-primary");

        if (this.validateInput()) {
            const { firstname, lastname, email, password } = this.state;
            const phone = Storage.SGet("credentials")["phone"];
            btn.classList.toggle("btn-loading");
            btn.disabled = true;

            SetupController.setup(firstname, lastname, email, password, phone)
                .then(response => {
                    if (response["response"]["error"] === null) {
                        this.setState({ firstname: "", lastname: "", email: "", password: "", });
                        event.target.reset();
                        Storage.SRemove("authentication");
                    }
                    else {
                        ErrorHandler.errorHandler(response["response"]["error"], 6000, ".error-message");
                    }
                })
                .catch(() => {
                    ErrorHandler.errorHandler("Server not responding", 6000, ".error-message");
                })
                .finally(() => {
                    btn.classList.toggle("btn-loading");
                    btn.disabled = false;
                })
        }
    }

    hideShowHint(event) {
        const target = event.target;
        const hint = target.nextSibling;
        hint.classList.toggle("hide");
    }

    /**
     * Validates setup form fields
     * @returns A boolean indicating the result of validation
     */
    validateInput() {
        const message = document.querySelector(".error-message");
        let result = true;
        const { firstname, lastname, email, password } = this.state;
        const emailRegex = new RegExp(/^(\w+(\.\w+)?)@(\w+).(\w{3})$/, "gmi");
        const firstnameRegex = new RegExp(/^([a-zA-Z]+)$/, "gmi");
        const lastnameRegex = new RegExp(/^([a-zA-Z]+)$/, "gmi");

        if (!firstname || !lastname || !email || !password) {
            ErrorHandler.errorHandler("Please provide all fields", 3000, ".error-message");
            result = false;
        }

        /**
         * According the ISO IEC 7813 the cardholder name length must be
         * 2 to 26 characters including first name, last name and spaces.
         */
        else if (!(firstname.length >= 2 && firstname.length <= 20)) {
            ErrorHandler.errorHandler("First name must be between 2 and 20 characters", 3000, ".error-message");
            result = false;
        }

        else if (!(lastname.length >= 2 && lastname.length <= 20)) {
            ErrorHandler.errorHandler("Last name must be between 2 and 20 characters", 3000, ".error-message");
            result = false;
        }

        else if (!firstnameRegex.test(firstname)) {
            ErrorHandler.errorHandler("Only letters are allowed for first name", 3000, ".error-message");
            result = false;
        }

        else if (!lastnameRegex.test(lastname)) {
            ErrorHandler.errorHandler("Only letters are allowed for last name", 3000, ".error-message");
            result = false;
        }

        else if (!emailRegex.test(email)) {
            ErrorHandler.errorHandler("Invalid Email address", 3000, ".error-message");
            result = false;
        }

        else if (!this.validPassword()) {
            ErrorHandler.errorHandler("Invalid Password", 3000, ".error-message");
            result = false;
        }

        else {
            message.textContent = "";
            message.classList.remove("show");
            message.classList.add("hide");
            result = true;
        }

        return result;
    }

    /**
     * Validates a password to make sure it contains
     * characters, capital letters and numbers and must be between 6 and 30 characters.
     * @returns A boolean indicating the result of validation.
     */
    validPassword() {

        const ch = [
            ["!", 1],
            ["@", 2],
            ["#", 3],
            ["$", 4],
            ["%", 5],
            ["^", 6],
            ["&", 7],
            ["*", 8],
            ["(", 9],
            [")", 10],
            ["-", 11],
            ["_", 12],
            ["=", 13],
            ["+", 14],
        ];
        const validCharacters = new Map(ch);
        let characters = false;
        let numbers = false;
        let capLetters = false;
        let length = false;
        const { password } = this.state;

        if ((password.length >= 6 && password.length <= 30)) {
            length = true;
            for (let i = 0; i < password.length; i += 1) {

                if (!characters && validCharacters.has(password[i])) {
                    characters = true;
                }
                if (!numbers && (password.charCodeAt(i) >= 48 && password.charCodeAt(i) <= 57)) {
                    numbers = true;
                }
                if (!capLetters && (password.charCodeAt(i) >= 65 && password.charCodeAt(i) <= 90)) {
                    capLetters = true;
                }
            }
        }

        return (characters && numbers && capLetters && length);
    }

    render() {
        return (
            <div className="Setup">
                <div className="Setup-logo">
                    <img src={logo} alt="Logo" className="logo" />
                </div>
                <h1 className="Setup-title">Setup Your Account</h1>
                <div className="Setup-error">
                    <span className="error-message hide" />
                </div>
                <form className="Setup-form" onSubmit={this.handleSubmit}>
                    <div className="Input">
                        <input type="name" value={this.state.firstname} placeholder="First Name" name="firstname" className="Setup-input" onChange={this.handleChange} />
                        <i className="fas fa-info-circle firstname" onClick={this.hideShowHint}></i>
                        <p className="hint hide">
                            <i>No special characters are allowed.</i>
                            <i>Length should be between 2 and 20 characters.</i>
                        </p>
                    </div>
                    <div className="Input">
                        <input type="name" value={this.state.lastname} placeholder="Last Name" name="lastname" className="Setup-input" onChange={this.handleChange} />
                        <i className="fas fa-info-circle lastname" onClick={this.hideShowHint}></i>
                        <p className="hint hide">
                            <i>No special characters are allowed.</i>
                            <i>Length should be between 2 and 20 characters.</i>
                        </p>
                    </div>
                    <div className="Input">
                        <input type="text" value={this.state.email} placeholder="Email" name="email" className="Setup-input" onChange={this.handleChange} />
                        <i className="fas fa-info-circle email" onClick={this.hideShowHint}></i>
                        <p className="hint hide">
                            <i>Special characters allowed [.].</i>
                            <i>No special characters at the beginning.</i>
                        </p>
                    </div>
                    <div className="Input">
                        <input type="password" value={this.state.password} placeholder="Your password" name="password" className="Setup-input" onChange={this.handleChange} />
                        <i className="fas fa-info-circle password" onClick={this.hideShowHint}></i>
                        <p className="hint hide">
                            <i>Must have a capital letter.</i>
                            <i>Must have a numeric character.</i>
                            <i>Must have a special character.</i>
                            <i>Length should be between 6 and 30 characters.</i>
                        </p>
                    </div>
                    <div className="Setup-button">
                        <button type="submit" className="btn-primary">
                            <span className="btn-text">Finish</span>
                        </button>
                    </div>
                </form>
            </div>
        );
    }
}

export default Setup;
